*acp.txt*       Automatically opens popup menu for completions.

        Copyright (c) 2016-2017 Zhenhuan Hu <wildkeny@gmail.com>
        Copyright (c) 2007-2009 Takeshi NISHIDA

AutoComplPop                                              *autocomplpop* *acp*

INTRODUCTION                    |acp-introduction|
INSTALLATION                    |acp-installation|
USAGE                           |acp-usage|
COMMANDS                        |acp-commands|
OPTIONS                         |acp-options|
SPECIAL THANKS                  |acp-thanks|
CHANGELOG                       |acp-changelog|
ABOUT                           |acp-about|

==============================================================================
INTRODUCTION                                                *acp-introduction*

This plugin is a fork of Takeshi Nishida's AutoComplPop. The plugin enables
VIM to automatically prompt popup menu for completion when inserting
characters in the text. It supports prompting completion for keywords and
omni-completion for various programming languages.

Supported programming languages:
  - HTML, XHTML, XML
  - CSS
  - JavaScript, Coffee, LiveScript
  - PHP
  - Perl
  - Python
  - Ruby
  - SAS

Improvements made in the fork:
  - Add default behaviors for JavaScript, Coffee, LiveScript, PHP, and SAS.
  - Add a new option |acp_select_first_item| to control whether to select the
    first item on the popup menu.
  - Fix various bugs in the original plugin.
  - Revert the reliability to L9 library.
    (See also: |acp-changelog|)

==============================================================================
INSTALLATION                                                *acp-installation*

Save all files into the runtime directory.

To enable help tags for this plugin, see |add-local-help| for details.

==============================================================================
USAGE                                                              *acp-usage*

Once installed, auto-popup is enabled at startup by default.

The completion behavior used depends on the file type and is triggered by the
text before the cursor. The supported behaviors are as follows:

        kind      filetype    text before the cursor ~
        Keyword   *           three keyword characters
        Filename  *           a filename character + a path separator 
                              + 0 or more filename characters
        Omni      ruby        ".", "::" or non-word characters + ":"
                              (|+ruby| required.)
        Omni      python      "." (|+python| required.)
        Omni      perl        "->" (|+perl| required.)
        Omni      xml         "<", "</" or ("<" + non-">" characters + " ")
        Omni      html/xhtml  "<", "</" or ("<" + non-">" characters + " ")
        Omni      css         ":", ";", "{", "^", "@", or "!" (+- 1 space)
        Omni      javascript  "."
        Omni      php         "->", "::"
        Omni      sas         "proc "

The plugin also allows users to make user-defined completion and snipMate's
trigger completion (See: |acp-snipmate|) auto-popup if the options are set.

These behaviors are customizable.

                                                                *acp-snipmate*
snipMate's Trigger Completion ~

The plugin supports completion of snippet trigger provided by the snipMate
plugin (http://www.vim.org/scripts/script.php?script_id=2540) and expand it.

To enable auto-popup for this completion, add following function to
plugin/snipMate.vim:
>
  fun! GetSnipsInCurrentScope()
    let snips = {}
    for scope in [bufnr('%')] + split(&ft, '\.') + ['_']
      call extend(snips, get(s:snippets, scope, {}), 'keep')
      call extend(snips, get(s:multi_snips, scope, {}), 'keep')
    endfor
    return snips
  endf
<
And set |g:acp_snipmate_length| option to 1.

It is the limitation of auto-popup that the texts before cursor must only
consist of uppercase letters.

                                                               *acp-perl-omni*
Perl Omni-Completion ~

The plugin supports Perl omni-completion provided by perl-completion.vim
(http://www.vim.org/scripts/script.php?script_id=2852).

To enable auto-popup for this completion, set |g:acp_perl_omni_length| option
to 0 or more.

==============================================================================
COMMANDS                                                        *acp-commands*

                                                                  *:AcpEnable*
:AcpEnable
        Enable auto-popup.

                                                                 *:AcpDisable*
:AcpDisable
        Disable auto-popup.

                                                                    *:AcpLock*
:AcpLock
        Suspend auto-popup.

        To avoid interruption with other scripts, it is recommended to insert
        this command and |:AcpUnlock| than |:AcpDisable| and |:AcpEnable|.

                                                                  *:AcpUnlock*
:AcpUnlock
        Resume auto-popup suspended by |:AcpLock|.

==============================================================================
OPTIONS                                                          *acp-options*

                                                     *g:acp_enable_at_startup*
>
  let g:acp_enable_at_startup = 1
<
        If non-zero, auto-popup is enabled at startup.

                                                     *g:acp_select_first_item*
>
  let g:acp_select_first_item = 1
<
        If non-zero, the first item will be selected in the auto-popup menu.

                                                        *g:acp_set_ignorecase*
>
  let g:acp_set_ignorecase = 1
<
        Value set to 'ignorecase' temporarily when auto-popup.

                                                          *g:acp_set_complete*
>
  let g:acp_set_complete = '.,w,b,k'
<
        Value set to 'complete' temporarily when auto-popup.

                                               *g:acp_set_completeopt_preview*
>
  let g:acp_set_completeopt_preview = 0
<
        If non-zero, "preview" is added to 'completeopt' when auto-popup.

                                             *g:acp_user_defined_completefunc*
>
  let g:acp_user_defined_completefunc = ''
<
        |g:acp_behavior-completefunc| for user-defined completion. If empty,
        this completion will not be attempted.

                                                    *g:acp_user_defined_meets*
>
  let g:acp_user_defined_meets = ''
<
        |g:acp_behavior-meets| for user-defined completion. If empty, this
        completion will not be attempted.

                                                       *g:acp_snipmate_length*
>
  let g:acp_snipmate_length = -1
<
        The minimum length of snipMate pattern before the cursor that is
        needed to attempt snipMate-trigger completion.

                                                       *g:acp_keyword_command*
>
  let g:acp_keyword_command = "\<C-n>"
<
        Command for keyword completion. This option is usually set "\<C-n>" or
        "\<C-p>".

                                                        *g:acp_keyword_length*
>
  let g:acp_keyword_length = 3
<
        The minimum length of keyword characters before the cursor that is
        needed to attempt keyword completion. If the value is negative, the
        completion will not be attempted.

                                                       *g:acp_keyword_ignored*
>
  let g:acp_keyword_ignored = []
<
        A list of strings defining keywords to be ignored for completion.

                                                           *g:acp_file_length*
>
  let g:acp_file_length = 0
<
        The length of filename characters before the cursor, which is needed
        to trigger filename completion. If the value is negative, the
        completion will not be attempted.

                                               *g:acp_ruby_omni_method_length*
>
  let g:acp_ruby_omni_method_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger Ruby omni-completion for Ruby methods. If the value is
        negative, the completion will not be attempted.

                                               *g:acp_ruby_omni_symbol_length*
>
  let g:acp_ruby_omni_symbol_length = 1
<
        The length of keyword characters before the cursor, which is needed to
        trigger Ruby omni-completion for Ruby symbols. If the value is
        negative, the completion will not be attempted.

                                                    *g:acp_python_omni_length*
>
  let g:acp_python_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger Python omni-completion. If the value is negative, the
        completion will not be attempted.

                                                      *g:acp_perl_omni_length*
>
  let g:acp_perl_omni_length = -1
<
        The length of keyword characters before the cursor, which is needed to
        trigger Perl omni-completion. If the value is negative, the completion
        will not be attempted.

        See also: |acp-perl-omni|

                                                       *g:acp_xml_omni_length*
>
  let g:acp_xml_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger XML omni-completion. If the value is negative, the completion
        will not be attempted.

                                                      *g:acp_html_omni_length*
>
  let g:acp_html_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger HTML omni-completion. If the value is negative, the completion
        will not be attempted.

                                              *g:acp_css_omni_property_length*
>
  let g:acp_css_omni_property_length = 1
<
        The length of keyword characters before the cursor, which is needed to
        trigger CSS omni-completion for CSS properties. If the value is
        negative, the completion will not be attempted.

                                                 *g:acp_css_omni_value_length*
>
  let g:acp_css_omni_value_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger CSS omni-completion for CSS values. If the value is negative,
        the completion will not be attempted.

                                                *g:acp_javascript_omni_length*
>
  let g:acp_javascript_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger JavaScript omni-completion. If the value is negative, the
        completion will not be attempted.

                                                       *g:acp_php_omni_length*
>
  let g:acp_php_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger PHP omni-completion. If the value is negative, the completion
        will not be attempted.

                                                       *g:acp_sas_omni_length*
>
  let g:acp_sas_omni_length = 0
<
        The length of keyword characters before the cursor, which is needed to
        trigger SAS omni-completion. If the value is negative, the completion
        will not be attempted.

                                                              *g:acp_behavior*
>
  let g:acp_behavior = {}
<
        This option is for advanced users. The setting overrides other
        behavior options. It is a |Dictionary|. Each key corresponds to a
        specific filetype. '*' is default. The value of each key is a |List|
        of completion behaviors. The behaviros are attempted in sequence
        until a feasible completion is found. Each completion behavior element
        is a |Dictionary| itself which contains following keys:

        "command":                                    *g:acp_behavior-command*
        Command to be fed to trigger popup menu for completion. It can be
        "<C-x><C-u>" for user completion or "<C-x><C-o>" for omni-completion.

        "completefunc":                          *g:acp_behavior-completefunc*
        A complete function. Normally triggered by pressing "<C-x><C-u>" or
        "<C-x><C-o>" in the |Insert| mode. (See also: |completion-functions|)

        "meets":                                        *g:acp_behavior-meets*
        Name of a function that determines whether to attempt a completion
        defined by the "completefunc" key. A completion will be attempted only
        if it returns a non-zero.

        The function will be called in two different ways:
        - First the function is called to determine whether to attempt a
          completion.
        - After a successful completion attempt, if the "repeat" key is
          non-zero, the function is called to determine whether to attempt a
          repeat.

        On the first invocation, a single argument will be given as:
          a:context   the text that needs to be matched with based on the
                      global length options

        On the second invocation the arguments are:
          a:context   the text that needs to be matched with
          a:1         0 by default

        The existence of a:1 is currently only used to indicate that the
        function is called for a repeat attempt. It is optional however
        whether the function honors the existence and/or actual value of a:1.
        If a:1 is ignored on a repeat attempt, the function will behavior the
        same way as on the first invocation.

        "closefunc":                                *g:acp_behavior-closefunc*
        Name of an optional close function for extra jobs that needs to be
        done after a completion is finished (e.g.: triggering a snippet). The
        function is called when a popup menu for completion is closed. The
        proceeding attempt for completion will be suppressed if the function
        returns a non-zero.

        "repeat":                                      *g:acp_behavior-repeat*
        If non-zero, the "meets" function will be called to determine whether
        the last completion behavior should be repeated instead of a new
        completion attempt.

==============================================================================
SPECIAL THANKS                                                    *acp-thanks*

- Daniel Schierbeck
- Ingo Karkat

==============================================================================
CHANGELOG                                                      *acp-changelog*

3.0-fork
  - Add default behaviors for JavaScript, Coffee, LiveScript, PHP, and SAS.
  - Add a new option |acp_select_first_item| to control whether to select the
    first item on the popup menu.
  - Use |TextChangedI| event to trigger auto-popup (This also makes the entire
    key-mapping mechanism obsolete, therefore remove the corresponding code).
  - Remove the reliability to L9 library.
  - Rename methods and variables based on VIM naming conventions.
  - Change all built-in "meets" functions to local scope.

    The following bugs have been fixed:
  - Fix a bug that moving cursor after changing back from |Normal| mode to
    |Insert| mode will trigger auto-popup menu.
  - Fix a bug that subsequent attempt is skipped after previous completion
    when the "meets" function length is 0.
  - Fix a bug that auto-popup menu will be triggered indecisively when the
    "repeat" key is non-zero.

    Other changes:
  - Remove Japanese documentation.

2.14.1
  - Changed the way of auto-popup for avoiding an issue about filename
    completion.
  - Fixed a bug that popup menu was opened twice when auto-popup was done.

2.14
  - Added the support for perl-completion.vim.

2.13
  - Changed to sort snipMate's triggers.
  - Fixed a bug that a wasted character was inserted after snipMate's trigger
    completion.

2.12.1
  - Changed to avoid a strange behavior with Microsoft IME.

2.12
  - Added g:acp_behaviorKeywordIgnores option.
  - Added g:acp_behaviorUserDefinedMeets option and removed
    g:acp_behaviorUserDefinedPattern.
  - Changed to do auto-popup only when a buffer is modified.
  - Changed the structure of g:acp_behavior option.
  - Changed to reflect a change of behavior options (named g:acp_behavior*)
    any time it is done.
  - Fixed a bug that completions after omni completions or snipMate's trigger
    completion were never attempted when no candidate for the former
    completions was found.

2.11.1
  - Fixed a bug that a snipMate's trigger could not be expanded when it was
    completed.

2.11
  - Implemented experimental feature which is snipMate's trigger completion.

2.10
  - Improved the response by changing not to attempt any completion when
    keyword characters are entered after a word which has been found that it
    has no completion candidate at the last attempt of completions.
  - Improved the response by changing to close popup menu when <BS> was
    pressed and the text before the cursor would not match with the pattern of
    current behavior.

2.9
  - Changed default behavior to support XML omni completion.
  - Changed default value of g:acp_behaviorKeywordCommand option.
    The option with "\<C-p>" cause a problem which inserts a match without
    <CR> when 'dictionary' has been set and keyword completion is done.
  - Changed to show error message when incompatible with a installed vim.

2.8.1
  - Fixed a bug which inserted a selected match to the next line when
    auto-wrapping (enabled with 'formatoptions') was performed.

2.8
  - Added g:acp_behaviorUserDefinedFunction option and
    g:acp_behaviorUserDefinedPattern option for users who want to make custom
    completion auto-popup.
  - Fixed a bug that setting 'spell' on a new buffer made typing go crazy.

2.7
  - Changed naming conventions for filenames, functions, commands, and option 
    and thus renamed them.
  - Added g:acp_behaviorKeywordCommand option. If you prefer the previous
    behavior for keyword completion, set this option "\<C-n>".
  - Changed default value of g:acp_ignorecaseOption option.

  The following were done by Ingo Karkat:

  - ENH: Added support for setting a user-provided 'completefunc' during the
    completion, configurable via g:acp_behavior. 
  - BUG: When the configured completion is <C-p> or <C-x><C-p>, the command to
    restore the original text (in on_popup_post()) must be reverted, too. 
  - BUG: When using a custom completion function (<C-x><C-u>) that also uses
    an s:...() function name, the s:GetSidPrefix() function dynamically
    determines the wrong SID. Now calling s:DetermineSidPrefix() once during
    sourcing and caching the value in s:SID. 
  - BUG: Should not use custom defined <C-X><C-...> completion mappings. Now
    consistently using unmapped completion commands everywhere. (Beforehand,
    s:PopupFeeder.feed() used mappings via feedkeys(..., 'm'), but
    s:PopupFeeder.on_popup_post() did not due to its invocation via
    :map-expr.) 

2.6:
  - Improved the behavior of omni completion for HTML/XHTML.

2.5:
  - Added some options to customize behavior easily:
      g:AutoComplPop_BehaviorKeywordLength
      g:AutoComplPop_BehaviorFileLength
      g:AutoComplPop_BehaviorRubyOmniMethodLength
      g:AutoComplPop_BehaviorRubyOmniSymbolLength
      g:AutoComplPop_BehaviorPythonOmniLength
      g:AutoComplPop_BehaviorHtmlOmniLength
      g:AutoComplPop_BehaviorCssOmniPropertyLength
      g:AutoComplPop_BehaviorCssOmniValueLength

2.4:
  - Added g:AutoComplPop_MappingDriven option.

2.3.1:
  - Changed to set 'lazyredraw' while a popup menu is visible to avoid
    flickering.
  - Changed a behavior for CSS.
  - Added support for GetLatestVimScripts.

2.3:
  - Added a behavior for Python to support omni completion.
  - Added a behavior for CSS to support omni completion.

2.2:
  - Changed not to work when 'paste' option is set.
  - Fixed AutoComplPopEnable command and AutoComplPopDisable command to
    map/unmap "i" and "R".

2.1:
  - Fixed the problem caused by "." command in Normal mode.
  - Changed to map "i" and "R" to feed completion command after starting
    Insert mode.
  - Avoided the problem caused by Windows IME.

2.0:
  - Changed to use CursorMovedI event to feed a completion command instead of
    key mapping. Now the auto-popup is triggered by moving the cursor.
  - Changed to feed completion command after starting Insert mode.
  - Removed g:AutoComplPop_MapList option.

1.7:
  - Added behaviors for HTML/XHTML. Now supports the omni completion for
    HTML/XHTML.
  - Changed not to show expressions for CTRL-R =.
  - Changed not to set 'nolazyredraw' while a popup menu is visible.

1.6.1:
  - Changed not to trigger the filename completion by a text which has
    multi-byte characters.

1.6:
  - Redesigned g:AutoComplPop_Behavior option.
  - Changed default value of g:AutoComplPop_CompleteOption option.
  - Changed default value of g:AutoComplPop_MapList option.

1.5:
  - Implemented continuous-completion for the filename completion. And added
    new option to g:AutoComplPop_Behavior.

1.4:
  - Fixed the bug that the auto-popup was not suspended in fuzzyfinder.
  - Fixed the bug that an error has occurred with Ruby-omni-completion unless
    Ruby interface.

1.3:
  - Supported Ruby-omni-completion by default.
  - Supported filename completion by default.
  - Added g:AutoComplPop_Behavior option.
  - Added g:AutoComplPop_CompleteoptPreview option.
  - Removed g:AutoComplPop_MinLength option.
  - Removed g:AutoComplPop_MaxLength option.
  - Removed g:AutoComplPop_PopupCmd option.

1.2:
  - Fixed bugs related to 'completeopt'.

1.1:
  - Added g:AutoComplPop_IgnoreCaseOption option.
  - Added g:AutoComplPop_NotEnableAtStartup option.
  - Removed g:AutoComplPop_LoadAndEnable option.
1.0:
  - g:AutoComplPop_LoadAndEnable option for a startup activation is added.
  - AutoComplPopLock command and AutoComplPopUnlock command are added to
    suspend and resume.
  - 'completeopt' and 'complete' options are changed temporarily while
    completing by this script.

0.4:
  - The first match are selected when the popup menu is Opened. You can insert
    the first match with CTRL-Y.

0.3:
  - Fixed the problem that the original text is not restored if 'longest' is
    not set in 'completeopt'. Now the plugin works whether or not 'longest' is
    set in 'completeopt', and also 'menuone'.

0.2:
  - When completion matches are not found, insert CTRL-E to stop completion.
  - Clear the echo area.
  - Fixed the problem in case of dividing words by symbols, popup menu is
    not opened.

0.1:
  - First release.

==============================================================================
ABOUT                                   *acp-about* *acp-contact* *acp-author*

Author:  Takeshi NISHIDA <ns9tks@DELETE-ME.gmail.com>
         Zhenhuan Hu <wildkeny@gmail.com>
Licence: MIT Licence
URL:
Old URL: http://www.vim.org/scripts/script.php?script_id=1879
         http://bitbucket.org/ns9tks/vim-autocomplpop/

Bugs/Issues/Suggestions/Improvements ~

Please submit to http://bitbucket.org/ns9tks/vim-autocomplpop/issues/ .

==============================================================================
 vim:tw=78:fo+=t:ts=8:ft=help:norl:
